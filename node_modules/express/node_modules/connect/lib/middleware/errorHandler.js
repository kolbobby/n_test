/*!
 * Connect - errorHandler
 * Copyright(c) 2010 Sencha Inc.
 * Copyright(c) 2011 TJ Holowaychuk
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var utils = require('../utils')
<<<<<<< HEAD
  , fs = require('fs');

// environment

var env = process.env.NODE_ENV || 'development';

/**
 * Error handler:
 *
 * Development error handler, providing stack traces
 * and error message responses for requests accepting text, html,
 * or json.
 *
=======
  , url = require('url')
  , fs = require('fs');

/**
 * Flexible error handler, providing (_optional_) stack traces
 * and error message responses for requests accepting text, html,
 * or json.
 *
 * Options:
 *
 *   - `showStack`, `stack` respond with both the error message and stack trace. Defaults to `false`
 *   - `showMessage`, `message`, respond with the exception message only. Defaults to `false`
 *   - `dumpExceptions`, `dump`, dump exceptions to stderr (without terminating the process). Defaults to `false`
 *
>>>>>>> 991b7b37bff376e03bd6cb6db3a199ed971da687
 * Text:
 *
 *   By default, and when _text/plain_ is accepted a simple stack trace
 *   or error message will be returned.
 *
 * JSON:
 *
 *   When _application/json_ is accepted, connect will respond with
<<<<<<< HEAD
 *   an object in the form of `{ "error": error }`.
=======
 *   an object in the form of `{ "error": error }`. 
>>>>>>> 991b7b37bff376e03bd6cb6db3a199ed971da687
 *
 * HTML:
 *
 *   When accepted connect will output a nice html stack trace.
 *
<<<<<<< HEAD
=======
 * @param {Object} options
>>>>>>> 991b7b37bff376e03bd6cb6db3a199ed971da687
 * @return {Function}
 * @api public
 */

<<<<<<< HEAD
exports = module.exports = function errorHandler(){
  return function errorHandler(err, req, res, next){
    if (err.status) res.statusCode = err.status;
    if (res.statusCode < 400) res.statusCode = 500;
    if ('test' != env) console.error(err.stack);
    var accept = req.headers.accept || '';
    // html
    if (~accept.indexOf('html')) {
      fs.readFile(__dirname + '/../public/style.css', 'utf8', function(e, style){
        fs.readFile(__dirname + '/../public/error.html', 'utf8', function(e, html){
          var stack = (err.stack || '')
            .split('\n').slice(1)
            .map(function(v){ return '<li>' + v + '</li>'; }).join('');
            html = html
              .replace('{style}', style)
              .replace('{stack}', stack)
              .replace('{title}', exports.title)
              .replace('{statusCode}', res.statusCode)
              .replace(/\{error\}/g, utils.escape(err.toString()));
            res.setHeader('Content-Type', 'text/html; charset=utf-8');
            res.end(html);
        });
      });
    // json
    } else if (~accept.indexOf('json')) {
      var error = { message: err.message, stack: err.stack };
      for (var prop in err) error[prop] = err[prop];
      var json = JSON.stringify({ error: error });
      res.setHeader('Content-Type', 'application/json');
      res.end(json);
    // plain text
    } else {
      res.writeHead(res.statusCode, { 'Content-Type': 'text/plain' });
      res.end(err.stack);
=======
exports = module.exports = function errorHandler(options){
  options = options || {};

  // defaults
  var showStack = options.showStack || options.stack
    , showMessage = options.showMessage || options.message
    , dumpExceptions = options.dumpExceptions || options.dump
    , formatUrl = options.formatUrl;

  return function errorHandler(err, req, res, next){
    res.statusCode = 500;
    if (dumpExceptions) console.error(err.stack);
    if (showStack) {
      var accept = req.headers.accept || '';
      // html
      if (~accept.indexOf('html')) {
        fs.readFile(__dirname + '/../public/style.css', 'utf8', function(e, style){
          fs.readFile(__dirname + '/../public/error.html', 'utf8', function(e, html){
            var stack = (err.stack || '')
              .split('\n').slice(1)
              .map(function(v){ return '<li>' + v + '</li>'; }).join('');
              html = html
                .replace('{style}', style)
                .replace('{stack}', stack)
                .replace('{title}', exports.title)
                .replace(/\{error\}/g, utils.escape(err.toString()));
              res.setHeader('Content-Type', 'text/html');
              res.end(html);
          });
        });
      // json
      } else if (~accept.indexOf('json')) {
        var json = JSON.stringify({ error: err });
        res.setHeader('Content-Type', 'application/json');
        res.end(json);
      // plain text
      } else {
        res.writeHead(500, { 'Content-Type': 'text/plain' });
        res.end(err.stack);
      }
    } else {
      var body = showMessage
        ? err.toString()
        : 'Internal Server Error';
      res.setHeader('Content-Type', 'text/plain');
      res.end(body);
>>>>>>> 991b7b37bff376e03bd6cb6db3a199ed971da687
    }
  };
};

/**
<<<<<<< HEAD
 * Template title, framework authors may override this value.
 */

exports.title = 'Connect';
=======
 * Template title.
 */

exports.title = 'Connect';
>>>>>>> 991b7b37bff376e03bd6cb6db3a199ed971da687
